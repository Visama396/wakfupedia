---
import { parseEffect } from '@/utils/parseEffect'
import { parseEffectIcon } from '@/utils/parseEffectIcon'
import recipes from '@recipes'
import jobsItems from '@jobsItems'
import states from '@states'
import recipeIngredients from '@recipeIngredients'
import recipeCategories from '@recipeCategories'
import recipeResults from '@recipeResults'

import Compass from '../components/icons/compass.astro'

const { item, itemTypeName } = Astro.props

const itemTypeId = item.definition.item.baseParameters.itemTypeId
if (itemTypeId === 582) item.definition.item.level = 50 // Makes pets be max level
const rarity = item.definition.item.baseParameters.rarity
const spriteId = item.definition.item.graphicParameters.gfxId
const hasRecipe = recipeResults.find(recipeResult => recipeResult.productedItemId == item.definition.item.id)
const recipe = recipes.find(r => r.id == hasRecipe?.recipeId)
const recipeCategory = recipeCategories.find(category => category.definition.id == recipe?.categoryId)
const ingredients : any[] = []
recipeIngredients.filter(recipeIngredient => 
  recipe?.id == recipeIngredient.recipeId
).sort((a, b) => 
  a.ingredientOrder - b.ingredientOrder
).forEach(recipeIngredient => {
    const jobItem = jobsItems.find(jobItem => jobItem.definition.id == recipeIngredient.itemId)
    if (jobItem != null && recipeIngredient != null) {
      ingredients.push(
        {
          "name": jobItem.title.es, 
          "quantity": recipeIngredient.quantity, 
          "spriteId": jobItem.definition.graphicParameters.gfxId
        })
    }
  }
)

item.definition.equipEffects.sort((a: { effect: { definition: { actionId: number } } }, b: { effect: { definition: { actionId: number } } }) => a.effect.definition.actionId - b.effect.definition.actionId)

let hasEffects = item.definition.equipEffects.length
let effects: number[] = []

if (hasEffects) {
  effects = item.definition.equipEffects.map(effect => effect.effect.definition.actionId)
}
const itemId = item.definition.item.id
const slug = `${itemId}-${item.title.es.toLowerCase().replaceAll(' ', '-').replaceAll("'", "-")}`

let itemState = null
const getState = (effect) => {
  const effectParams = effect.effect.definition.params
  const secondParam = effectParams[2]
  if (effect.effect.definition.actionId == 304) {
    let state = states.find(state => state.definition.id == effect.effect.definition.params[0])
    if (state.description) {
      itemState = state.description.es
    }
    if (itemState != null) {
      while (itemState.includes("[")) {
        // Multiplies value
        if (itemState.includes("[#2*")) {
          let ratio = parseInt(itemState.substring(itemState.indexOf("[#2*")+4, itemState.indexOf("]")))
          itemState = itemState.replace("[#2*"+ratio+"]", ratio*secondParam)
        }
        // Compares value
        else if (itemState.includes("[#2=")) {
          let computedParam = itemState.substring(itemState.indexOf("["), itemState.indexOf("]")+1)
          let trueValue = computedParam.substring(computedParam.indexOf("?")+1, computedParam.indexOf(":"))
          let falseValue = computedParam.substring(computedParam.indexOf(":")+1, computedParam.indexOf("]"))

          let comparedValue = parseInt(computedParam.substring(computedParam.indexOf("=")+1, computedParam.indexOf("?")))
          if (comparedValue === secondParam) {
            itemState = itemState.replace(computedParam, trueValue)
          }
          else
          {
            itemState = itemState.replace(computedParam, falseValue)
          }
        } else if (itemState.includes("[#2]")) itemState = itemState.replace("[#2]", secondParam)
      }
      return itemState
    }
  }
  return null
}

// Elements for states https://zenithwakfu.com/images/spells/misc/el2.webp
// Friendly icon for states https://tmktahu.github.io/WakfuAssets/misc/ally.png
---
<button data-name={item.title.es} data-level={item.definition.item.level} data-rarity={rarity} data-type={itemTypeId} data-bonus={effects.join(",")} class="group bg-slate-800/80 rounded-md p-2 flex flex-col gap-4 transition duration-300 cursor-pointer min-h-[500px] hover:bg-slate-900/70 focus:row-span-2 text-left">
  <header>
    <h2 class="text-2xl font-semibold mb-2">{item.title.es}</h2>
    <div class="flex gap-2">
      <figure>
        <img class="bg-slate-50/70 p-2 rounded-md" src={`https://vertylo.github.io/wakassets/items/${spriteId}.png`} alt="sprite" />
      </figure>
      <div class="flex flex-col gap-2">
        <div class="flex items-center gap-4">
          <p class="text-slate-300">Nivel {item.definition.item.level}</p>
          <div>
            <a href={`https://www.wakfu.com/es/mmorpg/enciclopedia/${(itemTypeName == 'familiares')? 'mascotas' : itemTypeName}/${slug}`} target="_blank" title="Ir al sitio web de este objeto"><Compass /></a>
          </div>
        </div>
        <div class="flex items-center gap-2 mb-1">
          <figure>
            <img src={`https://tmktahu.github.io/WakfuAssets/itemTypes/${itemTypeId}.png`} alt="item type" />
          </figure>
          <figure>
            <img src={`https://vertylo.github.io/wakassets/rarities/${rarity}.png`} alt="rarity" />
          </figure>
        </div>
      </div>
    </div>
  </header>
  <article class="hidden group-focus:flex flex-col">
    <h2 class="text-lg font-semibold">Descripción</h2>
    <p class="text-pretty text-slate-400">
      {item.description?.es}
    </p>
  </article>
  { hasEffects > 0? (
    <footer class="flex flex-col w-full gap-1 bg-slate-500/30 p-2 rounded-md basis-[100%] group-focus:basis-0">
      <h2 class="text-lg font-semibold">Características</h2>
        {
          item.definition.equipEffects.map((effect) => {
            let parsedEffect = parseEffect(effect, item.definition.item.level)
            let parsedIcon = parseEffectIcon(effect.effect.definition.actionId)
  
            return (
              <div class="flex gap-2 flex-row">
                {
                  parsedIcon ? (
                    <figure class="flex bg-slate-500 p-1 rounded-md self-start">
                      <img class="h-[18px]" src={parsedIcon} alt="stat" />
                    </figure>
                  ) : ""
                }
                {
                  (getState(effect)!=null) ? <span data-tooltip-target={`tooltip-${itemId}`} class="font-semibold underline underline-offset-4">{parsedEffect}</span> : <span>{parsedEffect}</span>
                }
              </div>
            )
          })
        }
    </footer>
  ): <footer class="bg-slate-500/30 rounded-md basis-[100%]"></footer>
  }
  <aside class="hidden group-focus:flex flex-col">
    {
      (!!hasRecipe)? (
        <h2 class="text-lg font-semibold">Receta de {recipeCategory?.title.es} de nivel {recipe?.level}:</h2>
        <div class="flex flex-col gap-2">
          {
            ingredients.map(ingredient => 
              (
                <div class="flex items-center gap-2">
                  <span class="font-semibold text-lg min-w-[40px] text-right">{ingredient.quantity}</span>
                  <span>x</span>
                  <div class="flex gap-2 bg-slate-400/30 p-2 items-center rounded-md basis-full">
                    <img src={`https://vertylo.github.io/wakassets/items/${ingredient.spriteId}.png`} alt="ingredient sprite" width="40" height="40" />
                    {ingredient.name}
                  </div>
                </div>
              )
            )
          }
        </div>
      ): 
      (
        <h2 class="text-lg font-semibold">No tiene receta.</h2>
      )
    }
  </aside>
  <div id={`tooltip-${itemId}`} role="tooltip" class="absolute z-10 max-w-[300px] invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-slate-800/80 rounded-lg shadow-xs opacity-0 tooltip dark:bg-slate-200/80">
    {
      ( itemState != null && itemState.length > 0 )?
          <p set:html={itemState}></p>
          : <p>No hay descripción aún</p>
    }
  </div>
</button>