---
import actions from '@actions'
import recipeCategories from '@recipeCategories'

import { parseEffect, elementMap } from '@/utils/parseEffect'
import { parseEffectIcon } from '@/utils/parseEffectIcon'

const { item } = Astro.props

const itemTypeId = item.definition.item.baseParameters.itemTypeId
const rarity = item.definition.item.baseParameters.rarity
const spriteId = item.definition.item.graphicParameters.gfxId

function parseElement(description, language) {
  if (description.includes("[el")) {
    switch(language) {
      case 0:
        description = description.replace(description.substring(description.indexOf("[")), elementMap[description.substring(description.indexOf("[")).charAt(3)].en)
        break;
      case 1:
        description = description.replace(description.substring(description.indexOf("[")), elementMap[description.substring(description.indexOf("[")).charAt(3)].pt)
        break;
      case 2:
        description = description.replace(description.substring(description.indexOf("[")), elementMap[description.substring(description.indexOf("[")).charAt(3)].fr)
        break;
      case 3:
        description = description.replace(description.substring(description.indexOf("[")), elementMap[description.substring(description.indexOf("[")).charAt(3)].es)
        break;
    }
  }

  return description
}
---

<div class="bg-zinc-600/80 rounded-md p-2 flex flex-col gap-4">
  <header>
    <h2 class="text-xl mb-2">{item["title"].es}</h2>
    <figure>
      <img class="bg-zinc-800/70 p-2 rounded-md" src={`https://tmktahu.github.io/WakfuAssets/items/${spriteId}.png`} alt="sprite" />
    </figure>
  </header>
  <footer class="bg-zinc-500/30 p-2 rounded-md basis-[100%]">
    <div class="flex gap-1 mb-1">
      <figure>
        <img src={`https://tmktahu.github.io/WakfuAssets/itemTypes/${itemTypeId}.png`} alt="item type" />
      </figure>
      <figure>
        <img src={`https://tmktahu.github.io/WakfuAssets/rarities/${rarity}.png`} alt="rarity" />
      </figure>
    </div>
      {
        item.definition.equipEffects.map((effect) => {
          let parsedEffect = parseEffect(effect.effect, item.definition.item.level)
          let parsedIcon = parseEffectIcon(parsedEffect.definition.actionId)
          let description = parseElement(parsedEffect.description.es, 3)

          return (
            <div class="flex flex-row justify-between align-center">
              <span>{description}</span>
              {
                parsedIcon ? (<span><img src={parsedIcon} alt="stat" /></span>) : ""
              }
            </div>
          )
        })
      }
  </footer>
</div>