---
// https://www.wakfu.com/en/forum/332-development/239038-string-logical-template-how-do-i-interpret-these-operators-translations?poid=1087235
// https://dev.to/heymarkkop/decoding-wakfu-s-action-effects-with-javascript-1nm2
import Layout from "@/layouts/Layout.astro";

import items from "@items";
import actions from "@actions";

let descriptions: string[] = []
let item1 = items[4]
console.log(item1.definition.item.baseParameters)

for (const effect of item1.definition.equipEffects) {
  let stack = 0

  const effectParams = effect.effect.definition.params

  const hasThreeOrMoreArguments = effectParams.length >= 6 // [~3]

  const firstParam = () => {
    const value = effectParams[0] + effectParams[1] * item1.definition.item.level
    stack = value
    return value
  }

  const secondParam = () => {
    const value = effectParams[2] + effectParams[3] * item1.definition.item.level
    stack = value
    return value
  }

  const thirdParam = () => {
    const value = effectParams[4] + effectParams[5] * item1.definition.item.level
    stack = value
    return value
  }

  const isLastStackValueGreaterThanTwo = () => stack >= 2 // [>2]
  const plural = () => isLastStackValueGreaterThanTwo() ? 's' : '' // [>2]?s:

  const effectActionId = effect.effect.definition.actionId
  const action = actions.find(action => action.definition.id === effectActionId)
  let actionDescription = action.description.es

  if (actionDescription == undefined) {continue}

  let computedParamNotFound = true

  function detectFirstCondition(actionDesc) {

    const conditions = [
      {
        name: "{[~3]?",
        regex: /\{\[~3]\?/
      },
      {
        name: "{[>2]?s:}",
        regex: /\{\[>2]\?s:}/
      },
      {
        name: "[#1]",
        regex: /\[#1]/
      },
      {
        name: "[#2]",
        regex: /\[#2]/
      },
      {
        name: "[#3]",
        regex: /\[#3]/
      }
    ]

    let firstCondition = null
    let firstIndex = actionDesc.length

    for (const condition of conditions) {
      const match = actionDesc.match(condition.regex)

      if (match && match.index < firstIndex) {
        firstIndex = match.index
        firstCondition = condition.name
      }
    }

    return firstCondition
  }

  while (computedParamNotFound) {
    computedParamNotFound = false

    let firstCondition = detectFirstCondition(actionDescription)

    if (firstCondition != null) {
      computedParamNotFound = true
      if (firstCondition == "{[~3]?") {
        if (!hasThreeOrMoreArguments) {
          actionDescription = actionDescription.substring(actionDescription.indexOf(":")+1, actionDescription.length-1)
        }
      } else if (firstCondition == "{[>2]?s:}") {
        actionDescription = actionDescription.replace("{[>2]?s:}", plural())
      } else if (firstCondition == "[#1]") {
        actionDescription = actionDescription.replace("[#1]", firstParam())
      } else if (firstCondition == "[#2]") {
        actionDescription = actionDescription.replace("[#2]", secondParam())
      } else if (firstCondition == "[#3]") {
        actionDescription = actionDescription.replace("[#3]", thirdParam())
      }
    }
  }

  actionDescription = actionDescription.replace("[el1]", "Fuego")
  actionDescription = actionDescription.replace("[el2]", "Agua")
  actionDescription = actionDescription.replace("[el3]", "Tierra")
  actionDescription = actionDescription.replace("[el4]", "Aire")

  descriptions.push(actionDescription)
}
---

<Layout title="Test">
  <h2 class="text-3xl font-bold">{item1.title.es}</h2>
  <section>
    {
      descriptions.map((description) => {
        return <p>{description}</p>
      })
    }
  </section>
</Layout>
